name: Build Binaries

permissions:
  contents: write

on:
  release:
    types: [published]

jobs:
  create-assets:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-14, windows-latest]

    defaults:
      run:
        shell: bash

    steps:
      - uses: actions/checkout@v4

      # Compute OS/arch and pick extension + suffix
      - name: Compute metadata
        run: |
          ARCH="$(uname -m)"
          OS="${{ matrix.os }}"
          EXT="tar.gz"; SUF=""
          if [[ "$OS" == "windows-latest" ]]; then EXT="zip"; SUF=".exe"; fi

          NAME="${{ github.event.repository.name }}-${{ github.ref_name }}-${OS}-${ARCH}"
          echo "ARCH=$ARCH" >> $GITHUB_ENV
          echo "OS=$OS" >> $GITHUB_ENV
          echo "EXT=$EXT" >> $GITHUB_ENV
          echo "SUF=$SUF" >> $GITHUB_ENV
          echo "NAME=$NAME" >> $GITHUB_ENV

      - name: Build
        run: cargo build --release

      - name: Stage artifact
        run: |
          mkdir -p dist
          SRC="target/release/${{ github.event.repository.name }}${SUF}"
          if [[ ! -f "$SRC" ]]; then
            # Fallback if binary name != repo name
            if [[ -n "$SUF" ]]; then
              SRC="$(ls -1 target/release/*.exe | head -n1)"
            else
              SRC="$(ls -1 target/release/* | grep -v '\.rlib$' | grep -v '\.rmeta$' | grep -v '\.dSYM$' | head -n1)"
            fi
          fi
          cp "$SRC" "dist/${NAME}${SUF}"

      - name: Archive
        run: |
          cd dist
          if [[ "$EXT" == "zip" ]]; then
            # Windows: use zip if present, otherwise PowerShell
            if command -v zip >/dev/null 2>&1; then
              zip "${NAME}.zip" "${NAME}${SUF}"
            else
              pwsh -Command "Compress-Archive -Path '${NAME}${SUF}' -DestinationPath '${NAME}.zip' -Force"
            fi
          else
            tar -czf "${NAME}.tar.gz" "${NAME}"
          fi
          # Save exact path for upload (no globs!)
          echo "ARTIFACT=dist/${NAME}.${EXT}" >> $GITHUB_ENV

      - name: Upload release asset
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: ${{ env.ARTIFACT }}
          asset_name: ${{ env.NAME }}.${{ env.EXT }}
          asset_content_type: application/octet-stream
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
